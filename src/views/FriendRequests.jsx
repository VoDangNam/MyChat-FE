import React, { useEffect, useState } from "react";
import axiosClient from "../api/axiosClient";

function FriendRequests() {
  const [requests, setRequests] = useState([]);
  const token = localStorage.getItem("token");

  // H√†m l·∫•y username t·ª´ localStorage (n·∫øu c·∫ßn)
  const getUsername = () => {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    return storedUser?.username;
  };

  useEffect(() => {
    fetchRequests();
  }, []);

  //  L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n

  const fetchRequests = async () => {
    // Th√™m check token ƒë·ªÉ ƒë·∫£m b·∫£o token t·ªìn t·∫°i tr∆∞·ªõc khi g·ªçi API
    if (!token) {
      console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y token.");
      return;
    } // B·ªè qua vi·ªác l·∫•y username, v√¨ n√≥ kh√¥ng c·∫ßn thi·∫øt cho URL n√†y n·ªØa // const currentUsername = getUsername(); // if (!currentUsername) return;
    try {
      // üõë S·ª¨A L·ªñI 404: X√≥a ${currentUsername} kh·ªèi URL
      const res = await axiosClient.get(`/friends/requests`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      console.log("Requests:", res.data);
      setRequests(res.data.map((req) => ({ ...req, action: "pending" })));
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y requests:", error);
    }
  };
  // Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
  const acceptRequest = async (requestId) => {
    try {
      await axiosClient.post(
        `/friends/acceptRequest?requestId=${requestId}`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      // C·∫≠p nh·∫≠t UI: ƒë·ªïi tr·∫°ng th√°i sang "accepted"
      setRequests((prev) =>
        prev.map((req) =>
          req.requestId === requestId ? { ...req, action: "accepted" } : req
        )
      );

      // L∆∞u danh s√°ch b·∫°n b√® m·ªõi (n·∫øu c·∫ßn)
      const friendsRes = await axiosClient.get(`/friends/me`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      localStorage.setItem("friends", JSON.stringify(friendsRes.data));
    } catch (error) {
      console.error("‚ùå L·ªói khi ch·∫•p nh·∫≠n:", error);
      if (error.response) {
        console.error("‚û°Ô∏è Backend b√°o:", error.response.data);
      }
    }
  };

  // T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
  const declineRequest = async (requestId) => {
    try {
      await axiosClient.post(
        `/friends/declineRequest?requestId=${requestId}`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      // C·∫≠p nh·∫≠t UI: ƒë·ªïi tr·∫°ng th√°i sang "declined" thay v√¨ x√≥a h·∫≥n
      setRequests((prev) =>
        prev.map((req) =>
          req.requestId === requestId ? { ...req, action: "declined" } : req
        )
      );

      // OPTIONAL: B·∫°n c√≥ th·ªÉ d√πng setTimeout ƒë·ªÉ x√≥a n√≥ sau 2 gi√¢y n·∫øu mu·ªën
      // setTimeout(() => {
      //     setRequests(prev => prev.filter(req => req.requestId !== requestId));
      // }, 2000);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·ª´ ch·ªëi:", error);
    }
  };

  return (
    <div className="p-6 bg-white rounded-2xl shadow-custom-down-blue animate-fadeIn">
      <h2 className="text-2xl font-semibold text-gray-800 mb-4">
        L·ªùi m·ªùi k·∫øt b·∫°n
      </h2>

      {requests.length === 0 ? (
        <p className="text-gray-500">Kh√¥ng c√≥ l·ªùi m·ªùi n√†o</p>
      ) : (
        <ul className="space-y-4">
          {requests.map((req) => (
            <li
              key={req.requestId}
              className="flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm hover:shadow-md transition"
            >
              <span className="text-gray-700 font-medium">
                {req.fromUsername}
              </span>

              <div className="space-x-2">
                {req.action === "pending" && (
                  <>
                    <button
                      onClick={() => acceptRequest(req.requestId)}
                      className="px-3 py-1 bg-green-500 hover:bg-green-600 text-white rounded-lg transition"
                    >
                      Ch·∫•p nh·∫≠n
                    </button>
                    <button
                      onClick={() => declineRequest(req.requestId)}
                      className="px-3 py-1 bg-red-500 hover:bg-red-600 text-white rounded-lg transition"
                    >
                      T·ª´ ch·ªëi
                    </button>
                  </>
                )}

                {req.action === "accepted" && (
                  <span className="text-green-600 font-medium">
                    ‚úÖ ƒê√£ ch·∫•p nh·∫≠n
                  </span>
                )}

                {req.action === "declined" && (
                  <span className="text-red-600 font-medium">
                    ‚ùå ƒê√£ t·ª´ ch·ªëi
                  </span>
                )}
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default FriendRequests;
